\section{Test}

\subsection{Test Suite}

We start off by defining the functor type for a test. The first parameter is a pointer to the global test suite context and the second parameter is a pointer to the context specific to this test. The result of a test functor should be a test result object representing the success or failure of the test.
<<Test Suite Functor>>=
typedef TestResult *(*test_f)(void *);
typedef struct Test {
  test_f;
};
@

We forward-declare the test suite here to allow it to be implementation defined. A TestResult implementation will be bound to the implementation of the overall test suite.
<<Test Suite Result>>=
typedef struct _TestResult TestResult;
@

At the very least we require that there is a failure test result and a success test result.

TODO: Elaborate, should be a part of the assert\_* family of functions?
<<test-suite-result-todo>>=
TestResult *test_result_failure(const char * const message);
TestResult *test_result_success(const char * const message);
@

Now that we have the basic building blocks we can start defining the test suite itself. As before, we forward-declare the test suite object.
<<test-suite-typedef>>=
typedef struct _TestSuite TestSuite;
@

We also define the API for the test suite, once a test suite has been built we can only add new tests or run the current test suite. In order to add a new test to a test suite you must pass a reference to the test suite itself as well as a message describing what the test does, a reference to the test functor and the context for the test functor. If the specific test you are invoking doesn't require a context then you can pass NULL as the last parameter.
<<test-suite-add-h>>=
void test_suite_add(TestSuite *, const char *, test, void *);
@

The test suite runner is much simpler to define. Here we consume the test suite context and output the results in some user-defined way. It is expected that the runner will invoke each of the tests in the order they were added.
<<test-suite-run-h>>=
void test_suite_run(const TestSuite *);
@

We also need to define a vtable for the test suite so we can call the above functions polymorphically.
<<test-suite-vtable>>=
typedef struct {
  void (*add)(TestSuite *, const char *, test, void *);
  void (*run)(const TestSuite *);
} test_suite_vtable;
@

We need a way to create new test suites. We need a string message that represents the test suite name as well as a context to be setup and torn down by the respective set\_up and tear\_down functions. Both of these functions will be called with the context as a parameter between tests. The set\_up will be called before the test is invoked and tear\_down will be called after.
<<test-suite-factory>>=
TestSuite* test_suite_new(const char *, void *, set_up, tear_down);
@

The set\_up and tear\_down functions take a reference to the test suite and return nothing.
<<test-suite-up-down>>=
typedef void (*set_up)(const TestSuite *);
typedef void (*tear_down)(const TestSuite *);
@

<<test-suite.h>>=
@pragma once
<<test-suite-result>>
<<test-suite-functor>>
<<test-suite-typedef>>
<<test-suite-add-h>>
<<test-suite-run-h>>
<<test-suite-vtable>>
<<test-suite-up-down>>
<<test-suite-factory>>
@

<<test-suite.c>>=
@

<<test-suite-implementation.c>>=

typedef struct {
  test_suite_vtable vtable;
  set_up;
  tear_down;
  void *context;
  List *tests;
} _TestSuite;

TestSuite *test_suite_new(const char *name, void *context) {
  TestSuite *t = malloc(sizeof(TestSuite));
  t->set_up = set_up;
  t->tear_down = tear_down;
  t->context = context;
  t->tests = list_new();
  t->vtable = test_suite_vtable_...;
  return t;
}
@

<<test-h>>=
#pragma once

#include <stdbool.h>
#include <stddef.h>

#define assert_fail() _assert_fail(__FILE__, __LINE__, __func__)
#define assert_true(expr)                                                      \
  _assert_true((expr), #expr, __FILE__, __LINE__, __func__)
#define assert_false(expr)                                                     \
  _assert_false((expr), #expr, __FILE__, __LINE__, __func__)
#define assert_equals(a, b)                                                    \
  _assert_equals((a), (b), #a, #b, __FILE__, __LINE__, __func__)
#define assert_not_equals(a, b)                                                \
  _assert_not_equals((a), (b), #a, #b, __FILE__, __LINE__, __func__)

/**
 * Tests whether two memory regions contain the same values.
 *
 * @param a the pointer to the first memory region.
 * @param b the pointer to the second memory region.
 */
#define assert_memcmp(a, b)                                                    \
  _assert_memcmp((a), (b), sizeof(a), #a, #b, __FILE__, __LINE__, __func__)

/**
 * Tests whether two memory regions contain the same values.
 *
 * @param a the pointer to the first memory region.
 * @param b the pointer to the second memory region.
 * @param num the number of bytes to compare.
 */
#define assert_memcmp_len(a, b, num)                                           \
  _assert_memcmp((a), (b), (num), #a, #b, __FILE__, __LINE__, __func__)

void _assert_fail(const char *file, int line, const char *func);
void _assert_true(bool expr, const char *expr_s, const char *file, int line,
                  const char *func);
void _assert_false(bool expr, const char *expr_s, const char *file, int line,
                   const char *func);
void _assert_equals(int a, int b, const char *a_s, const char *b_s,
                    const char *file, int line, const char *func);
void _assert_not_equals(int a, int b, const char *a_s, const char *b_s,
                        const char *file, int line, const char *func);
void _assert_memcmp(const void *a, const void *b, size_t num, const char *a_s,
                    const char *b_s, const char *file, int line,
                    const char *func);

@
<<test-c>>=
#include "test.h"
#include "../lang/type.h"

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void _assert_fail(const char *file, int line, const char *func) {
  fprintf(stderr, "%s:%d: %s: Test failed.\n", file, line, func);
  assert(false), exit(EXIT_FAILURE);
}

void _assert_true(bool expr, const char *expr_s, const char *file, int line,
                  const char *func) {
  if (!expr) {
    fprintf(stderr, "%s:%d: %s: Test `%s' failed.\n", file, line, func, expr_s);
    assert(false), exit(EXIT_FAILURE);
  }
}

void _assert_false(bool expr, const char *expr_s, const char *file, int line,
                   const char *func) {
  if (expr) {
    fprintf(stderr, "%s:%d: %s: Test `%s' failed.\n", file, line, func, expr_s);
    assert(false), exit(EXIT_FAILURE);
  }
}

void _assert_equals(int a, int b, const char *a_s, const char *b_s,
                    const char *file, int line, const char *func) {
  if (a != b) {
    fprintf(stderr, "%s:%d: %s: `%d' != `%d'.\n", file, line, func, a, b);
    assert(false), exit(EXIT_FAILURE);
  }
}

void _assert_not_equals(int a, int b, const char *a_s, const char *b_s,
                        const char *file, int line, const char *func) {
  if (a == b) {
    fprintf(stderr, "%s:%d: %s: `%d' != `%d'.\n", file, line, func, a, b);
    assert(false), exit(EXIT_FAILURE);
  }
}

void _assert_memcmp(const void *a, const void *b, size_t num, const char *a_s,
                    const char *b_s, const char *file, int line,
                    const char *func) {
  if (memcmp(a, b, num)) {
    fprintf(stderr, "%s:%d: %s: `%d' != `%d'.\n", file, line, func,
            POINTER_TO_INT(a), POINTER_TO_INT(b));
    assert(false), exit(EXIT_FAILURE);
  }
}
@
